cluster_rows = TRUE,
cluster_cols = TRUE,
annotation_col = data.frame(Group = group))
head(deg_genes)
head(rownames(adjusted_exprs))
common_genes
deg_genes <- rownames(deg_results[deg_results$adj.P.Val < 0.1 & abs(deg_results$logFC) > 0.2, ])
# Gerekli Kütüphaneler
library(GEOquery)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(pheatmap)
# Veri Setini Yükle
gse60194 <- getGEO("GSE60194", GSEMatrix = TRUE)
exprs_data <- exprs(gse60194[[1]])
# Grupları Tanımla
group <- factor(c("Control", "Treatment"))  # Grupları veri setine göre güncelle
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
# Diferansiyel Ekspresyon Analizi (DEG)
fit <- lmFit(exprs_data, design)
contrast <- makeContrasts(Treatment - Control, levels = design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
# Gerekli Kütüphaneler
library(GEOquery)
library(limma)
library(WGCNA)
colnames(exprs_data)  # Örneklerin isimlerini kontrol edin
group <- factor(c("Control", "Control", "Treatment", "Treatment"))  # Gruplara göre güncelle
Error in library(WGCNA) : there is no package called ‘WGCNA’
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("WGCNA")
library(WGCNA)
install.packages("WGCNA", dependencies = TRUE)
colnames(exprs_data)
# Örnek grupları manuel olarak belirtiyoruz
group <- factor(c(rep("Control", 2), rep("Treatment", 2)))  # Örneğin 2 Control ve 2 Treatment varsa
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
# Gerekli Kütüphaneler
library(GEOquery)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(WGCNA)  # Eğer eksikse yukarıdaki adımları izleyerek yükleyin
library(pheatmap)
# Veri Setini Yükle
gse60194 <- getGEO("GSE60194", GSEMatrix = TRUE)
exprs_data <- exprs(gse60194[[1]])
# Örnekleri İncele ve Grupları Tanımla
colnames(exprs_data)  # Örnek isimlerini kontrol edin
group <- factor(c(rep("Control", 2), rep("Treatment", 2)))  # Örnek sayısına göre güncelle
# Tasarım Matrisi
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
# Diferansiyel Ekspresyon Analizi
fit <- lmFit(exprs_data, design)
# Gerekli Kütüphaneler
library(GEOquery)
library(limma)
library(WGCNA)
library(clusterProfiler)
library(org.Hs.eg.db)
# Veri Setini Yükle
gse12443 <- getGEO("GSE12443", GSEMatrix = TRUE)
exprs_data <- exprs(gse12443[[1]])
# PCA Analizi
pca <- prcomp(t(exprs_data))
# Gerekli Kütüphaneler
library(GEOquery)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(pheatmap)
# Veri Setini Yükle
gse60194 <- getGEO("GSE60194", GSEMatrix = TRUE)
exprs_data <- exprs(gse60194[[1]])
# Grupları Tanımla
group <- factor(c("Control", "Treatment"))  # Grupları veri setine göre güncelle
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
# Diferansiyel Ekspresyon Analizi (DEG)
fit <- lmFit(exprs_data, design)
contrast <- makeContrasts(Treatment - Control, levels = design)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
group <- factor(c("Control", "Control", "Treatment", "Treatment"))  # Daha fazla örnek varsa bu şekilde genişletin
metadata <- pData(gse60194[[1]])
head(metadata)  # Örneklerin gruplarını kontrol edin
head(rownames(exprs_data))
library(clusterProfiler)
deg_genes_symbol <- bitr(deg_genes, fromType = "ENSEMBL", toType = "SYMBOL", OrgDb = org.Hs.eg.db)
deg_genes <- rownames(deg_results[deg_results$adj.P.Val < 0.1 & abs(deg_results$logFC) > 0.5, ])
length(deg_genes)  # DEG listesi boş mu?
all(deg_genes %in% rownames(exprs_data))  # Tüm genler veri setinde mevcut mu?
# Gerekli Kütüphaneler
library(GEOquery)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(pheatmap)
# Veri Setini Yükle
gse60194 <- getGEO("GSE60194", GSEMatrix = TRUE)
exprs_data <- exprs(gse60194[[1]])
# Meta Verileri İncele
metadata <- pData(gse60194[[1]])
print(head(metadata))  # Grupları buradan belirleyin
# Grupları Tanımla (Meta verilerden çekiyorsanız buna göre düzenleyin)
group <- factor(c("Control", "Control", "Treatment", "Treatment"))  # Örneğe göre güncelle
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
# Diferansiyel Ekspresyon Analizi
fit <- lmFit(exprs_data, design)
n_samples <- ncol(exprs_data)
print(paste("Örnek sayısı:", n_samples))
metadata <- pData(gse60194[[1]])
head(metadata)  # Meta verileri inceleyin
group <- factor(metadata$source_name_ch1)
group <- factor(c("Control", "Control", "Treatment", "Treatment"))
length(group)
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
# Gerekli Kütüphaneler
library(GEOquery)
library(limma)
# Veri Setini Yükle
gse60194 <- getGEO("GSE60194", GSEMatrix = TRUE)
exprs_data <- exprs(gse60194[[1]])
# Örnek Sayısını Kontrol Et
n_samples <- ncol(exprs_data)
print(paste("Örnek sayısı:", n_samples))
# Meta Verileri İncele
metadata <- pData(gse60194[[1]])
print(head(metadata))  # Meta verilerdeki grupları belirlemek için
# Grupları Tanımla
# Meta verilerden çekin veya örnek sayısına göre manuel oluşturun
group <- factor(c("Control", "Control", "Treatment", "Treatment"))  # Örnek: 4 örnekli veri seti
# Grup Bilgilerini Kontrol Et
if (length(group) != n_samples) {
stop("Grup sayısı, örnek sayısıyla eşleşmiyor! Lütfen grup bilgilerini kontrol edin.")
}
# Gerekli Kütüphaneler
library(GEOquery)
library(limma)
# Veri Setini Yükle
gse60194 <- getGEO("GSE60194", GSEMatrix = TRUE)
exprs_data <- exprs(gse60194[[1]])
# Örnek Sayısını Kontrol Et
n_samples <- ncol(exprs_data)
print(paste("Veri setindeki örnek sayısı:", n_samples))
# Meta Verilerden Grup Bilgilerini Çekin
metadata <- pData(gse60194[[1]])
print(head(metadata))  # Meta verilerde grup bilgisi var mı kontrol edin
# Eğer meta verilerden grup çekmek istiyorsanız:
# group <- factor(metadata$source_name_ch1)  # Grup sütununu belirleyin
# Manuel Grup Tanımlaması
# Veri setindeki örnek sayısına uygun şekilde tanımlayın
group <- factor(c("Control", "Control", "Treatment", "Treatment"))  # Örneği düzenleyin
# Grup ve Veri Uyumunu Kontrol Edin
if (length(group) != n_samples) {
stop("Grup sayısı, örnek sayısıyla eşleşmiyor! Grup bilgilerini kontrol edin.")
}
# Gerekli Kütüphane
library(GEOquery)
# Veri Setini Yükle
gse60194 <- getGEO("GSE60194", GSEMatrix = TRUE)
exprs_data <- exprs(gse60194[[1]])
# Meta Verileri Çek
metadata <- pData(gse60194[[1]])
# Meta Verileri İncele
print("Meta verilerin ilk birkaç satırı:")
print(head(metadata))
# Kullanılabilir Sütunları Kontrol Et
print("Meta verilerdeki sütun isimleri:")
print(colnames(metadata))
# Grupları Belirlemek İçin Muhtemel Sütunu Kontrol Et
# Örneğin 'source_name_ch1' sütununda grup bilgisi olabilir.
if ("source_name_ch1" %in% colnames(metadata)) {
print("Grup bilgisi muhtemelen 'source_name_ch1' sütununda:")
print(unique(metadata$source_name_ch1))
} else {
print("Grup bilgisi 'source_name_ch1' sütununda değil, diğer sütunları kontrol edin.")
}
# Grup Bilgisini Belirleme
# Eğer meta verilerde doğru bir sütun bulursanız, bu sütunu kullanarak grupları tanımlayın.
# Örneğin:
group <- factor(metadata$source_name_ch1)
# Grup ve Veri Uyumunu Kontrol Et
if (length(group) != ncol(exprs_data)) {
stop("Grup sayısı, veri setindeki örnek sayısıyla eşleşmiyor! Grup bilgilerini kontrol edin.")
} else {
print("Grup bilgisi ve veri seti uyumlu!")
}
# Grupları Görüntüleyin
print("Tanımlanan gruplar:")
print(group)
# Metadata'dan grup bilgilerini al
group <- factor(metadata$source_name_ch1)  # source_name_ch1 doğru kolon olarak belirlenmiş
# Grup ve veri uyumu kontrolü
if (length(group) != n_samples) {
stop("Grup sayısı, veri setindeki örnek sayısıyla eşleşmiyor! Grup bilgilerini kontrol edin.")
} else {
print("Grup bilgisi ve veri seti uyumlu!")
}
# Dizayn matrisi
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
# Dizayn matrisini kontrol edin
print(design)
library(limma)
# Lineer modelleme
fit <- lmFit(exprs_data, design)
# Karşılaştırmalar oluşturun (örneğin, lentiviral shCD133 ile kontrol grubu karşılaştırması)
contrast <- makeContrasts(Treatment_vs_Control = "lentiviral shCD133-infected Huh7 cell - lentiviral vector-infected Huh7 cell",
levels = design)
library(clusterProfiler)
library(org.Hs.eg.db)
# Signifikant genler (adj.P.Val < 0.05 ve abs(logFC) > 1)
deg_genes <- rownames(deg_results[deg_results$adj.P.Val < 0.05 & abs(deg_results$logFC) > 1, ])
# GO Zenginleştirme
go_results <- enrichGO(gene = deg_genes, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "BP", pAdjustMethod = "fdr")
# GO sonuçlarını kontrol edin
head(go_results)
# Görselleştirme
library(enrichplot)
dotplot(go_results, showCategory = 10)
library(pheatmap)
# İlk 50 anlamlı geni seçin
top_genes <- head(rownames(deg_results[order(deg_results$adj.P.Val), ]), 50)
# Isı haritası oluşturma
pheatmap(exprs_data[top_genes, ],
cluster_rows = TRUE,
cluster_cols = TRUE,
annotation_col = data.frame(Group = group))
Error in makeContrasts(...) :
# Grup isimlerini düzenle
colnames(design) <- make.names(colnames(design))
# Kontrast oluşturma
contrast <- makeContrasts(Treatment_vs_Control = lentiviral.shCD133.infected.Huh7.cell - lentiviral.vector.infected.Huh7.cell,
levels = design)
library(clusterProfiler)
library(org.Hs.eg.db)
# Gen isimlerini ENTREZ ID'ye çevirme
deg_genes_entrez <- bitr(deg_genes, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
# GO Zenginleştirme Analizi
go_results <- enrichGO(gene = deg_genes_entrez$ENTREZID,
OrgDb = org.Hs.eg.db,
keyType = "ENTREZID",
ont = "BP",
pAdjustMethod = "fdr")
# GO sonuçlarını kontrol edin
head(go_results)
# NA/NaN/Inf değerleri kontrol edin
if (any(is.na(exprs_data))) {
print("Veride NA değerler var, dolduruluyor...")
exprs_data[is.na(exprs_data)] <- 0  # NA değerleri 0 ile doldurabilirsiniz
}
if (any(is.infinite(exprs_data))) {
print("Veride sonsuz değerler var, dolduruluyor...")
exprs_data[is.infinite(exprs_data)] <- max(exprs_data[!is.infinite(exprs_data)], na.rm = TRUE)
}
# Isı haritası tekrar oluşturun
pheatmap(exprs_data[top_genes, ],
cluster_rows = TRUE,
cluster_cols = TRUE,
annotation_col = data.frame(Group = group))
# Gerekli Kütüphaneler
library(GEOquery)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(pheatmap)
# Veri Setini Yükle
gse60194 <- getGEO("GSE60194", GSEMatrix = TRUE)
exprs_data <- exprs(gse60194[[1]])
# Grup Bilgilerini Tanımla
group <- factor(metadata$source_name_ch1)
design <- model.matrix(~0 + group)
colnames(design) <- make.names(colnames(design))
# Lineer Modelleme ve Karşılaştırma
fit <- lmFit(exprs_data, design)
contrast <- makeContrasts(Treatment_vs_Control = lentiviral.shCD133.infected.Huh7.cell - lentiviral.vector.infected.Huh7.cell,
levels = design)
# İlk 50 anlamlı genin seçimi
top_genes <- head(rownames(deg_results[order(deg_results$adj.P.Val), ]), 50)
# Boş olup olmadığını kontrol edin
if (length(top_genes) == 0) {
stop("Seçilen gen listesi boş! lütfen 'deg_results' veya filtreleme kriterlerini kontrol edin.")
}
# Grup boyutunu kontrol edin
if (length(group) != ncol(exprs_data)) {
stop("Grup boyutu, veri setindeki örnek sayısıyla eşleşmiyor!")
}
# Eğer uyumluysa pheatmap'i çalıştırın
pheatmap(exprs_data[top_genes, ],
cluster_rows = TRUE,
cluster_cols = TRUE,
annotation_col = data.frame(Group = group))
# Veriyi temizleme
if (any(is.na(exprs_data))) {
exprs_data[is.na(exprs_data)] <- 0
}
if (any(is.infinite(exprs_data))) {
exprs_data[is.infinite(exprs_data)] <- max(exprs_data[!is.infinite(exprs_data)], na.rm = TRUE)
}
# İlk 50 anlamlı geni seçin
top_genes <- head(rownames(deg_results[order(deg_results$adj.P.Val), ]), 50)
# Gen ve grup bilgilerini kontrol edin
if (length(top_genes) == 0) {
stop("Seçilen gen listesi boş! Lütfen filtreleme kriterlerini kontrol edin.")
}
if (length(group) != ncol(exprs_data)) {
stop("Grup boyutu, veri setindeki örnek sayısıyla eşleşmiyor!")
}
# NA ve Inf değerlerini temizleme
if (any(is.na(exprs_data))) {
exprs_data[is.na(exprs_data)] <- 0
}
if (any(is.infinite(exprs_data))) {
exprs_data[is.infinite(exprs_data)] <- max(exprs_data[!is.infinite(exprs_data)], na.rm = TRUE)
}
# Isı haritası oluşturma
pheatmap(exprs_data[top_genes, ],
cluster_rows = TRUE,
cluster_cols = TRUE,
annotation_col = data.frame(Group = group))
pheatmap(exprs_data[top_genes, ],
cluster_rows = TRUE,
cluster_cols = TRUE)
# Dizayn matrisindeki sütun isimlerini kontrol et
colnames(design)
[1] "group.lentiviral.shCD133.infected.Huh7.cell" "group.lentiviral.vector.infected.Huh7.cell"
"group.lentiviral.shCD133.infected.Huh7.cell" "group.lentiviral.vector.infected.Huh7.cell"
group.lentiviral.shCD133.infected.Huh7.cell" "group.lentiviral.vector.infected.Huh7.cel
contrast <- makeContrasts(
Treatment_vs_Control = group.lentiviral.shCD133.infected.Huh7.cell - group.lentiviral.vector.infected.Huh7.cell,
levels = design
)
# Dizayn matrisindeki sütun isimlerini kontrol edin
print("Design matrisindeki sütun isimleri:")
print(colnames(design))
# Doğru isimleri kullanarak karşılaştırma oluşturma
contrast <- makeContrasts(
Treatment_vs_Control = group.lentiviral.shCD133.infected.Huh7.cell - group.lentiviral.vector.infected.Huh7.cell,
levels = design
)
unique(metadata$source_name_ch1)
# Dizayn matrisindeki sütun isimlerini kontrol et
colnames(design)
[1] "group.lentiviral.shCD133.infected.Huh7.cell" "group.lentiviral.vector.infected.Huh7.cell"
contrast <- makeContrasts(
Treatment_vs_Control = group.lentiviral.shCD133.infected.Huh7.cell - group.lentiviral.vector.infected.Huh7.cell,
levels = design
)
# Dizayn matrisindeki sütun isimlerini kontrol edin
print("Design matrisindeki sütun isimleri:")
print(colnames(design))
# Doğru isimleri kullanarak karşılaştırma oluşturma
contrast <- makeContrasts(
Treatment_vs_Control = group.lentiviral.shCD133.infected.Huh7.cell - group.lentiviral.vector.infected.Huh7.cell,
levels = design
)
unique(metadata$source_name_ch1)
source("~/.active-rstudio-document", encoding = 'UTF-8')
# Gerekli kütüphaneler
library(GEOquery)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(pheatmap)
# Gerekli kütüphaneler
library(GEOquery)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(pheatmap)
# Gerekli kütüphaneler
library(GEOquery)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(pheatmap)
# Veri setini yükle
gse60194 <- getGEO("GSE60194", GSEMatrix = TRUE)
exprs_data <- exprs(gse60194[[1]])
metadata <- pData(gse60194[[1]])  # Metadata'yı al
# Grup bilgilerini tanımla
group <- factor(metadata$source_name_ch1)
print("Tanımlanan gruplar:")
print(unique(group))
# Dizayn matrisini oluştur
design <- model.matrix(~0 + group)
colnames(design) <- make.names(colnames(design))
print("Design matrisindeki sütun isimleri:")
print(colnames(design))
# Lineer modelleme
fit <- lmFit(exprs_data, design)
# Karşılaştırma oluştur
contrast <- makeContrasts(
Treatment_vs_Control = group.lentiviral.shCD133.infected.Huh7.cell - group.lentiviral.vector.infected.Huh7.cell,
levels = design
)
# DEG sonuçlarına göre anlamlı genleri seç
deg_genes <- rownames(deg_results[deg_results$adj.P.Val < 0.05 & abs(deg_results$logFC) > 1, ])
# GO zenginleştirme analizi
go_results <- enrichGO(
gene = deg_genes,
OrgDb = org.Hs.eg.db,
keyType = "SYMBOL",
ont = "BP",
pAdjustMethod = "fdr"
)
# GO sonuçlarını görüntüle
head(go_results)
# GO dotplot
library(enrichplot)
dotplot(go_results, showCategory = 10)
# 1. Gerekli Kütüphaneleri Yükle
library(GEOquery)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(pheatmap)
# 2. Veri Setini Yükle
gse60194 <- getGEO("GSE60194", GSEMatrix = TRUE)
exprs_data <- exprs(gse60194[[1]])
metadata <- pData(gse60194[[1]])
group <- factor(metadata$source_name_ch1)
design <- model.matrix(~0 + group)
colnames(design) <- make.names(colnames(design))
# 3. Lineer Modelleme ve Karşılaştırma
fit <- lmFit(exprs_data, design)
contrast <- makeContrasts(
Treatment_vs_Control = group.lentiviral.shCD133.infected.Huh7.cell - group.lentiviral.vector.infected.Huh7.cell,
levels = design
)
# 1. Gerekli Kütüphaneleri Yükle
library(GEOquery)
library(limma)
library(clusterProfiler)
library(org.Hs.eg.db)
library(pheatmap)
# 2. Veri Setini Yükle
gse60194 <- getGEO("GSE60194", GSEMatrix = TRUE)
exprs_data <- exprs(gse60194[[1]])
metadata <- pData(gse60194[[1]])
# 3. Grup Bilgilerini Tanımla
group <- factor(metadata$source_name_ch1)  # Metadata'dan grup bilgisi çekiliyor
design <- model.matrix(~0 + group)         # Dizayn matrisi
colnames(design) <- make.names(levels(group))  # Geçerli grup isimlerini düzenle
# Dizayn matrisini kontrol et
print("Dizayn matrisi:")
print(design)
# 4. Lineer Modelleme ve Karşılaştırma
fit <- lmFit(exprs_data, design)
# Karşılaştırma oluştur (Grup adlarını dizayn matrisine uygun hale getir)
contrast <- makeContrasts(
Treatment_vs_Control = `lentiviral.shCD133.infected.Huh7.cell` - `lentiviral.vector.infected.Huh7.cell`,
levels = design
)
fit2 <- contrasts.fit(fit, contrast)
fit2 <- eBayes(fit2)
# Metadata'daki sütun isimlerini kontrol edin
print("Metadata sütun isimleri:")
print(colnames(metadata))
# Muhtemel grup bilgisini içeren sütunu kontrol edin (örneğin, 'source_name_ch1')
if ("source_name_ch1" %in% colnames(metadata)) {
print("Muhtemelen grup bilgisi 'source_name_ch1' sütununda:")
print(unique(metadata$source_name_ch1))  # Benzersiz grup adlarını göster
} else {
print("Grup bilgisi 'source_name_ch1' sütununda değil. Diğer sütunları kontrol edin.")
}
# 1. Grup Bilgilerini Kontrol Edin
print("Grup Bilgileri:")
print(levels(group))
# 2. Grup ve Veri Seti Uyumunu Sağlayın
if (length(group) != ncol(exprs_data)) {
stop("Grup sayısı, örnek sayısıyla eşleşmiyor! Grup bilgilerini kontrol edin.")
} else {
print("Grup bilgisi ve veri seti uyumlu!")
}
# 3. Lineer Modelleme ve Karşılaştırma
fit <- lmFit(exprs_data, design)
# Grup isimlerini doğru şekilde kullanarak karşılaştırma oluşturun
contrast <- makeContrasts(
Treatment_vs_Control = `lentiviral shCD133-infected Huh7 cell` - `lentiviral vector-infected Huh7 cell`,
levels = design
)
colnames(design)
contrast <- makeContrasts(
Treatment_vs_Control = `lentiviral shCD133-infected Huh7 cell` - `lentiviral vector-infected Huh7 cell`,
levels = design
)
contrast <- makeContrasts(
Treatment_vs_Control = ''lentiviral shCD133-infected Huh7 cell'' - 'lentiviral vector-infected Huh7 cell',
contrast <- makeContrasts(
Treatment_vs_Control = 'lentiviral shCD133-infected Huh7 cell' - 'lentiviral vector-infected Huh7 cell'',
levels = design
)
contrast <- makeContrasts(
Treatment_vs_Control = `lentiviral shCD133-infected Huh7 cell` - `lentiviral vector-infected Huh7 cell`,
levels = design
)
table(group)
>table(group)
load("C:/Users/User/Documents/first/.RData")
source("~/.active-rstudio-document")
savehistory("C:/Users/User/Desktop/deneme2.Rhistory")
